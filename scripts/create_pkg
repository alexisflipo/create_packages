#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import stat


def create_architecture(project_name = 'project_unamed'): 
    folders = [f"pkg_{project_name}","api","notebooks","scripts"]
    files = [f"pkg_{project_name}/__init__.py", f"pkg_{project_name}/get_data.py", 
    f"pkg_{project_name}/model.py",f"pkg_{project_name}/pipeline.py",f"pkg_{project_name}/preprocessing.py",
     "README.md","Makefile","Dockerfile","requirements.txt","setup.py","api/main.py",f"scripts/script_{project_name}",".gitignore"]
    
    os.system(f"mkdir {project_name}")
    
    for folder in folders:
        os.system(f"mkdir {project_name}/{folder}")
    for file in files:
        os.system(f"touch {project_name}/{file}")

project_name = sys.argv[1]

file_content = {
      "requirements":
    {
        "file_path": f"{project_name}/requirements.txt", # pwd ?
        "file_text": "fastapi \nuvicorn \ndocker \ngunicorn"
    },

    "setup":
    {
        "file_path": f"{project_name}/setup.py",#pwd ?
        "file_text": f"""from setuptools import _install_setup_requires, setup, find_packages

with open('requirements.txt') as file:
    content = file.readlines()
    requirements = [x.strip() for x in content]

setup(
    name='{project_name}_pkg',
    version='0.0.1',
    packages=find_packages(
        where='{project_name}',
        include=['*pkg*'],
    ),
    scripts=['scripts/'],
    requirements=requirements
)"""
    },

 "make_file":
    {
        "file_path": f"{project_name}/Makefile", 
        "file_text": 
"""test:
\t@coverage run -m pytest test/*.py
install_requirements:
\t@pip install -r requirements.txt"""
    },
    "fastapi":
    {
        "file_path": f"{project_name}/api/main.py", 
        "file_text": 
"""from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}"""
    },
    "dockerfile":
    {
        "file_path": f"{project_name}/Dockerfile", 
        "file_text": 
"""FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7

COPY ./api /api
"""
    }
    
}

def write_to_file():
    for file in file_content:
        os.chmod(file_content[file]["file_path"] ,stat.S_IRWXU)
        with open(file_content[file]["file_path"], "w") as current_file:
            current_file.write(file_content[file]["file_text"])
    

create_architecture(project_name = sys.argv[1])
write_to_file()

